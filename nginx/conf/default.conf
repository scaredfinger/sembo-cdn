# Add Docker DNS resolver
resolver 127.0.0.11 ipv6=off;

# Logging format
log_format json_combined escape=json
'{
  "time_local":"$time_local",
  "remote_addr":"$remote_addr",
  "remote_user":"$remote_user",
  "request":"$request",
  "status": "$status",
  "body_bytes_sent":"$body_bytes_sent",
  "http_referer":"$http_referer",
  "http_user_agent":"$http_user_agent",
  "request_time":"$request_time",
  "upstream_response_time":"$upstream_response_time"
}';

# Conditional access log based on environment variable
map $enable_access_log $loggable {
    "true"  1;   # Enable logging when ENABLE_ACCESS_LOG=true
    "1"     1;   # Enable logging when ENABLE_ACCESS_LOG=1
    default 0;   # Disable logging by default
}

access_log /dev/stdout json_combined if=$loggable;

# Lua settings
lua_shared_dict metrics 1m;
lua_shared_dict routes 1m;
lua_package_path '/usr/local/openresty/nginx/lua/?.lua;/usr/local/openresty/nginx/lua/?/init.lua;;';

# These control the connection pool behavior
lua_socket_pool_size 30;           # Max connections per pool
lua_socket_keepalive_timeout 60s;  # How long to keep idle connections
lua_socket_connect_timeout 5s;     # Connection timeout

# Initialize Lua modules
init_by_lua_file /usr/local/openresty/nginx/lua/init.lua;

# env REDIS_HOST;

# Main server block
server {
    listen 80;
    server_name _;

    # Set variable from environment for access log control
    set_by_lua_block $enable_access_log {
        return os.getenv("ENABLE_ACCESS_LOG") or "false"
    }
    
    # # Health check endpoint
    location /health {
        access_log off;
        content_by_lua_file /usr/local/openresty/nginx/lua/handlers/health.lua;
    }

    # Main proxy location
    location / {
        # Unified content handler (handles both route pattern and proxying)
        content_by_lua_file /usr/local/openresty/nginx/lua/handlers/main/index.lua;
    }
}

# Cache control server
server {
    listen 8080;
    server_name _;

    # Set variable from environment for access log control
    set_by_lua_block $enable_access_log {
        return os.getenv("ENABLE_ACCESS_LOG") or "false"
    }

    location /cache/tags {
        # Control handler for WireMock
        content_by_lua_file /usr/local/openresty/nginx/lua/handlers/invalidate/index.lua;
    }
}

# Metrics server
server {
    listen 9090;
    server_name _;
    
    location /metrics {
        access_log off;
        content_by_lua_file /usr/local/openresty/nginx/lua/handlers/metrics/index.lua;
    }
    
    location /metrics/debug {
        access_log off;
        content_by_lua_file /usr/local/openresty/nginx/lua/handlers/metrics/debug.lua;
    }
    
    location / {
        return 404 'Metrics endpoint only';
    }
}
