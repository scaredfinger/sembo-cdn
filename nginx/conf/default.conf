# Add Docker DNS resolver
resolver 127.0.0.11 ipv6=off;

# Logging format
log_format json_combined escape=json
'{
  "time_local":"$time_local",
  "remote_addr":"$remote_addr",
  "remote_user":"$remote_user",
  "request":"$request",
  "status": "$status",
  "body_bytes_sent":"$body_bytes_sent",
  "http_referer":"$http_referer",
  "http_user_agent":"$http_user_agent",
  "request_time":"$request_time",
  "upstream_response_time":"$upstream_response_time",
  "route_pattern":"$route_pattern"
}';

access_log /dev/stdout json_combined;

# Lua settings
lua_shared_dict metrics 10m;
lua_shared_dict routes 1m;
lua_package_path '/usr/local/openresty/nginx/lua/?.lua;/usr/local/openresty/nginx/lua/?/init.lua;;';

# These control the connection pool behavior
lua_socket_pool_size 30;           # Max connections per pool
lua_socket_keepalive_timeout 60s;  # How long to keep idle connections
lua_socket_connect_timeout 5s;     # Connection timeout

# Initialize Lua modules
init_by_lua_file /usr/local/openresty/nginx/lua/init.lua;

# env REDIS_HOST;

# Main server block
server {
    listen 80;
    server_name _;
    
    # Variables for route pattern matching
    set $route_pattern "";
    
    # # Health check endpoint
    location /health {
        access_log off;
        content_by_lua_file /usr/local/openresty/nginx/lua/handlers/health.lua;
    }
        
    location /play {
        content_by_lua_file /usr/local/openresty/nginx/lua/handlers/play.lua;
    }

    # Main proxy location
    location / {
        # Unified content handler (handles both route pattern and proxying)
        content_by_lua_file /usr/local/openresty/nginx/lua/handlers/main/index.lua;
    }
}

# Metrics server (separate port)
# server {
#     listen 9090;
#     server_name _;
    
#     location /metrics {
#         access_log off;
#         content_by_lua_file /usr/local/openresty/nginx/lua/handlers/metrics.lua;
#     }
    
#     location / {
#         return 404 'Metrics endpoint only';
#     }
# }
